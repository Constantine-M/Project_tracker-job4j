package ru.job4j.course.oop.privedenie;

/**
 * В данном классе продемонстрируем понятие "приведение типов".
 */
public class HierarchyUsage {
    public static void main(String[] args) {
        /**Создаем объект класса Car*/
        Car car = new Car();
        /**Теперь этот объект можно записать в переменную с типом Transport и Object.*/
        /**
         * То есть мы приводим объект Car к типу любого класса в его иерархии.
         * Такое приведения типов называется повышающим приведение (up casting).
         * Мы приводим конкретный тип к более общему типу данных.
         * Если посмотреть на схему, то мы как бы поднимаемся вверх.
         * Синтаксис этого приведения типов ничем не отличается
         * от обычной записи объекта в переменную.
         */
        /**Делаем приведение к типу родителя Transport - up casting.*/
        Transport tp = car;
        /**Делаем приведение к типу родителя Object - up casting.*/
        Object obj = car;
        /**Приведение типа при создании объекта.*/
        Object ocar = new Car();
        /**понижающим приведением (down casting). На диаграмме мы опускаемся вниз.*/
        /**Приведение типа за счет понижения по иерархии - down casting.*/
        Car carFromObject = (Car) ocar;

        /**Понижающего приведения в коде лучше избегать, по той причине,
         * что код становится не стабильным и нам приходится догадываться,
         * к какому типу данных нужно сделать приведение.*/
        /**Ошибка в приведении типа*/
        /**Если я правильно понимаю, то мы можем привести машину или велик к родительскому
         * классу и можем транспорт понизить до класса машины или велика.*/
        Object bicycle = new Bicycle();

        /**
         * Код завершится с ошибкой приведения типов ClassCastException.
         */
        Car cb = (Car) bicycle;

        /**Этот метод принимает любой тип данных.
         * Это происходит, потому что метод println принимает тип Object.*/
        System.out.println(new Car());
        System.out.println(new Bicycle());
        System.out.println(new Object());
        /**При его вызове происходит приведение типа к классу Object.*/
    }
}
