package ru.job4j.tracker;

/**
 * На примере данного класса опишем шаблон проектирования "Singleton".
 * Шаблон singleton применяют в проектах, где используются внешние ресурсы:
 * файловая система, база данных, связь с другими приложениями.
 * В таких проектах доступ к ресурсу нужно ограничить использованием
 * одного объекта на виртуальную машину.
 * В нашей системе потребовалось ввести протоколирование действий системы.
 * Чтобы пользоваться классом, нам нужно создать объект этого класса.
 * Но в этом случае каждый объект класса Log4File будет содержать
 * свои данные. Чтобы этого избежать:
 * 1. Создадим явно конструктор и укажем у него модификатор private.
 * Таким образом, никто не сможет создать объект этого класса.
 * 2. Так же нужно запретить наследование этого класса.
 * 3. Чтобы пользоваться, мы можем создать объект внутри класса.
 * 4. Как дать на объект ссылку? - Мы будем использовать "static"
 * - его можно исп-ть для полей класса.
 * Как мы знаем, ключ слово "static" обозначает привязку
 * к классу, а не к объекту.
 */
public final class Log4File {
    
    private static Log4File instance = null;

    private String[] messages = new String[1000];
    private int index = 0;

    private Log4File() {

    }

    /**
     * С помощью ключевого слова static мы привязываем поле к классу.
     * Благодаря этому мы можем сохранить ссылку на объект класса.
     * @return возвращает объект instance класса Log4File.
     */
    public static Log4File getInstance() {
        if (instance == null) {
            instance = new Log4File();
        }
        return instance;
    }

    public void add(String message) {
        messages[++index] = message;
    }

    public void save() {
        /* TODO Сохраняем записи из массива messages в файл. */
    }
}
